git/github/sourcetree


・基本マスターが軸（公開最新ver）
・マスターベースに結合するときはマージ
・別ブランチに結合するときは、リベース使用
(別枠でマージとリベースの違い調べるのもありかも)
・プッシュ・プルは最新の状態で行う（リモートリポジトリでのリセットが発生させないように）
・ブランチの作りすぎは注意

#1リポジトリとは
ファイルの変更履歴を保存しておいてくれる。保管庫
隠しファイルで.gitがあればローカルリポジトリとされる
	-（コピーや整理の際は.gitファイルも忘れずに移行する必要あり）
	-理由があっての.gitファイル削除するときは削除してあげたら通常のディレクトリーとかわらない存在となる
gitに登録しておけばいつだれがどのように変更したかがわかる

#3ブランチ
ブランチ名横の〇と太字になっているブランチがアクティブモードになっている
チェックアウト機能過去のコミット時点の内容にHEADタグをつけて内容を確認することが出来る。（新規ブランチは作成されない）
ブランチ削除の際は、別のブランチをチェックアウト（アクティブ）にしてから行う。
	-エラー表記が出たら、このブランチどこにもンチがマージされてなくてこのまま削除すると変更がなくなってしまうという警告

#4結合
結合方法
①マージ（変更が加わった部分だけ取り込む、上書きではない）⇒masterブランチに合流行うのはマージ
合流元ブランチ（主にmaster）をチェックアウト（アクティブ）にして合流させたいブランチにて右クリックマージ
分岐が残る
②リベース⇒master以外のブランチに合流行うのはリベース
一度やってしまうと元に戻るはめんどくさい
分岐が残らない

マージ衝突（コンフリクト）：マージの際にエラー表記が発生。データ同士で衝突が起きているので訂正しないといけない
			-「ファイルステータス」にて衝突しているデータ右クリック「競合を解決」にて主に自分の内容に変更または相手の内容に変更を使用

#5リモートリポジトリ作成&提携（git hub使用）
1.git hubにて新規プロジェクト作成
2.source tree 「ツール」「オプション」「認証」「追加」「ホスティングサービス：Github　優先するプロトコル：HTTPS」「Credentials 認証：OAuth OAuthトークンを再読み込み」
3.「リポジトリ」「リモート追加」「追加」「githubのアカウントに変更」
4.「git hubページのcodeにてurlコピー」
5.「3」の続きとして、「リモート名：空白　デフォルトリモートにチェック」「URL/パス：先程コピーした物をペースト」「ＯＫ」

プッシュの際は追跡は付けた方がいい
プッシュ：ローカルからリモートへ同期を行う
強制プッシュは細心の注意を払って行う

※プッシュするときはもうこれ以上リセットしない段階（完成形）でプッシュするようにした方が良い


#6プルフェッチ
フェッチ：リモートリポジトリでの内容をローカルに通知させる（リモートリポジトリでの操作は何もしないとローカルに通知されることはない）
プル：リモートリポジトリでの内容をローカルに同期させる
	-プルのチェック項目はあまり触ることはない（そのままＯＫで大丈夫）
プッシュエラー表記：プッシュが拒否されました。（リジェクトリされています）フェッチを確認してみてください
		-フェッチでの確認
		-プルを行う-競合による衝突が起きたら-vscode上での競合解決orsourcetree上で競合解決する必要がある
		

※強制プッシュは最新の注意を払う（やらない方がいいかも）
※リモートリポジトリでのリセットは非常に手間がかかる為
リモートリポジトリにプッシュした後にローカルリポジトリのリセットはしない



#7
・git-flow-cheetseet（ソフトウェア開発向け）
-5つのブランチ作成-マスターはマージ用（いじらない）
-デベロップブランチを大本として、いじるのはフィーチャーブランチメイン
-ルールの定義


順序
①ローカルリポジトリ作成後master/developブランチの作成（コミットはREADEME.txt [init]）
②featureブランチ作成（コミットはindex.html[toppage作成]）＝主に制作時はこのブランチ使用
③featureブランチによる制作が進んだらdevelopブランチにマージ＝developチェックアウトし右上「GitFlow」「フィーチャーブランチを完了」「そのままＯＫ」
④すると、featureブランチがなくなり、developブランチに反映されている
⑤developブランチが完成しリリース準備段階となり、「Git Flow」よりreleaseブランチを作成（リリース名：v1.1等ver名を記載する）
⑥バグの修正等完了後masterブランチとdevelopブランチを合流する（master,developが最新状態になるよう揃える）
＝一番最新verのrelease樹形図クリック青枠状態にして「Git Flow」「リリースを完了」「リリース名：v~~~」「次のメッセージでタグ：v~~~」「完了後に：ブランチを削除」「ＯＫ」

⑦公開後のバグが発生した際の修正　hotfixブランチを右上「Git Flow」より作成「名前は何でもＯＫ[fix_bug]」
⑧バグ修正後　「Git Flow」「ホットフィックスを完了」「メッセージタグ：v1.1.1小数点第三位に数字追加」
⑨再度hotfixからmasterとdevelopにマージ
最初のコミットは「init」ですることがある
masterブランチに合流したときにタグ等を使用してその時のverstion等記載することがある






#8
・git-hub-flow（先程git-flowより簡素化したもの）
・トピックブランチをメインに運用していく（デベロップブランチ）
・マスターにマージはしてはいけない（リーダー承認が必要）
・マスターにマージするときはプルリクエスト（リーダーにマージ依頼する事）を用いる。
	-レビュワーで承認者を選択できる
・master一本で不安ならdevelopブランチを同時並行するのもあり
・マージまではtopicブランチにて作成、マージは承認者に依頼

順序
①ローカルリポジトリ作成後master/topic（自分の名前/build_top_page etc...）ブランチ作成（コミットはREADEME.txt [init]）
②git hubにて新しいプロジェクトを作成
③ローカルとリモートの提携「リポジトリ」「リモートを追加」「追加」「リモート名」「パス」「git hubアカウント」「ok」
	⇒master/topic両方プッシュ
④プルリクエスト申請　「リポジトリ」「プルリクエストを作成」「プルリクエストをweb上で作成」
	⇒git hubページへ移動　「master」←「topic」 「TOPページ終わりましたのでマージしてください」「create pull request」
	⇒プルリクエストを完了

	-reviewers項目による承認者の指定が可能

⑤リーダー　プルリクエストされたtopicブランチをプルして内容を確認（レビュー）
⑥リーダー　「×」プルリクエストされた内容をレビューして明らかに修正箇所がある場合はgit hub上で「close pull request」で再度プルリクエスト申請依頼ができる
⑦リーダー　「〇」内容がＯＫの場合github上で「Merge pull request」「Confirm merge」
⑧リモートリポジトリ上でマージが完了され、その内容をローカルに落とす。フィッチ、プル





#9コマンドライン     
ターミナル　コマンドプロンプト　パワーシェル
git --version　バージョンチェック
cd（チェンジディレクトリー）　../   デスクトップへ移動
mkdir（メイクディレクトリー） git-command-test  ディレクトリ作成「git-command-test」
cd git-command-test  「git-command-test」へ移動
git init 空っぽのgitのリポジトリ作成（隠しフォルダ開くと.gitが出来上がる）
git status  今のgitの状態が見れる(ステージング状態)
	-modified   変更されているデータの表示


git add ファイル名（～.htmlなど）　　ファイル名をステージングする
	-git add .  で今ある全てのファイルをステージングする
git rm（リムーブ＝消す） --cached ファイル名　　ステージング解除

☆
①git commit  コミット指定（画面が変わる）（ビムというエディター起動する）
		-キーボードで小文字の「i」を打つ＝挿入モードに移行（文字が打てるようになる）
		-打ち込み（コミット文章）が終わったら「Esc」を押す
		保存方法⇒：wq (上書き保存して終了)

②git commit -m'コミット文章`　直接コミット文章を打ち込める


git log  ここまでコミットした情報が見れる
	-ログが長くなると末尾が「：」になる。続きが見れる。
	-長く続いているログを見るのを辞めたいときは「q」のキーボードを押してあげると終了する

git reset --------------- --（hard） コミットリセット（コミットハッシュをコピペ「commit [----------------------]）
git branch develop デベロップブランチ作成
git branch 存在するブランチの確認及びアクティブに設定されているブランチの確認
git checkout （develop）デベロップブランチにアクティブ設定（git branch コマンドで確認するとデベロップブランチがアクティブ設定されている）

git merge develop マージされる

git --help  コマンド表が表示


#10 コマンドにてリモートリポジトリ
git clone https~~~~~~（クローンurl） ~~~~（ディレクトリー名）⇒リモートリポジトリからクローンの作成

git commit -a  ステージングとコミット同時にしてくれる
git commit -am'~~~~~~~~~~'ステージングコミットメッセージ同時にしてくれる


git push origin(リモートリポジトリ名) master(ブランチ名)　指定場所にプッシュできる
git remote リモートリポジトリ名を調べる
git remote -v リモートリポジトリ名がどこのurlを指しているのか調べる

git commit -am'abc'
